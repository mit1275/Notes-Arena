import * as React from 'react';
/**
 * @hidden
 */
export declare function useDir(elementRef: React.RefObject<HTMLElement | null>, initialDir?: string, args?: any): string | undefined;
declare type AsyncFocusBlur<T extends any[]> = {
    onFocus?: (...event: T) => void;
    onBlur?: (...event: T) => void;
};
/**
 * An utility function for asynchronous focus/blur handling.
 *
 * By default, the `onFocus` and `onBlur` callbacks are called every time a child components receives/loses focus.
 * Use this utility hook for scenarios where you need to know if the parent has received focus for the first time, or completely lost focus.
 *
 * @returns
 */
export declare function useAsyncFocusBlur<T extends any[]>({ onFocus, onBlur }: AsyncFocusBlur<T>): AsyncFocusBlur<T>;
export {};
