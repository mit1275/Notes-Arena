import { TableKeyboardNavigationContextType } from './TableKeyboardNavigationContextType';
import { TableKeyboardNavigationStateType } from './TableKeyboardNavigationStateType';
/**
 * @hidden
 */
export declare const generateNavigatableId: (navigationId: string, idPrefix: string, type?: "column" | "cell") => string;
/**
 * @hidden
 */
export declare const getNavigatableLevel: (element: Element) => number;
/**
 * @hidden
 */
export declare const getNavigatableId: (element: Element) => string;
/**
 * @hidden
 */
export declare const isNavigatable: (element: Element) => boolean;
/**
 * @hidden
 */
export declare const getNavigatableElement: (scope: HTMLElement, options?: {
    level: number;
}) => HTMLElement;
/**
 * @hidden
 */
export declare const getClosestNavigatableElement: (target: HTMLElement) => Element;
/**
 * @hidden
 */
export declare const getActiveElement: (scope: HTMLElement, activeId?: string) => HTMLElement;
/**
 * @hidden
 */
export declare const getClosestScope: (target: HTMLElement) => Element;
/**
 * @hidden
 */
export declare const getHeaderElement: (scope: HTMLElement) => Element;
/**
 * @hidden
 */
export declare const getBodyElement: (scope: HTMLElement) => Element;
/**
 * @hidden
 */
export declare const getFocusableElements: (scope: HTMLElement, options?: {
    focusable: boolean;
}) => Element[];
/**
 * @hidden
 */
export declare const getNavigatableElements: (scope: HTMLElement, options?: {
    level: number;
}) => any[];
/**
 * @hidden
 */
export declare const filterNavigatableElements: (options?: {
    level: number;
}) => (element: HTMLElement) => boolean;
/**
 * @hidden
 */
export declare const focusElement: (options: {
    elementForFocus: HTMLElement;
    prevElement?: HTMLElement;
    contextStateRef: {
        current?: TableKeyboardNavigationContextType;
    };
    event: any;
}) => void;
/**
 * @hidden
 */
export declare const getIdPrefix: (navigationStateRef: {
    current?: TableKeyboardNavigationStateType;
}) => string;
/**
 * @hidden
 */
export declare const findNextIdByRowIndex: (initialRowIndex: number, cellIndex: number, elementId: string, matrix: string[][], isReverse: boolean) => [string, [number, number]] | [];
/**
 * @hidden
 */
export declare const findNextIdByCellIndex: (rowIndex: number, initialCellIndex: number, elementId: string, matrix: string[][], isReverse: boolean) => [string, [number, number]] | [];
/**
 * @hidden
 */
export declare const findId: (navigationMatrix: string[][], cellId?: string) => number[];
/**
 * @hidden
 */
export declare const getNextNavigationIndex: (navigationStateRef: {
    current?: TableKeyboardNavigationStateType;
}) => number;
/**
 * @hidden
 */
export declare const getFilterColumnId: (columnId: string) => string;
/**
 * @hidden
 */
export declare const tableKeyboardNavigationTools: {
    generateNavigatableId: (navigationId: string, idPrefix: string, type?: "column" | "cell") => string;
    getNavigatableId: (element: Element) => string;
    getNavigatableLevel: (element: Element) => number;
    getNavigatableElement: (scope: HTMLElement, options?: {
        level: number;
    }) => HTMLElement;
    getClosestNavigatableElement: (target: HTMLElement) => Element;
    getActiveElement: (scope: HTMLElement, activeId?: string) => HTMLElement;
    getClosestScope: (target: HTMLElement) => Element;
    getHeaderElement: (scope: HTMLElement) => Element;
    getBodyElement: (scope: HTMLElement) => Element;
    getFocusableElements: (scope: HTMLElement, options?: {
        focusable: boolean;
    }) => Element[];
    getNavigatableElements: (scope: HTMLElement, options?: {
        level: number;
    }) => any[];
    filterNavigatableElements: (options?: {
        level: number;
    }) => (element: HTMLElement) => boolean;
    focusElement: (options: {
        elementForFocus: HTMLElement;
        prevElement?: HTMLElement;
        contextStateRef: {
            current?: TableKeyboardNavigationContextType;
        };
        event: any;
    }) => void;
    getIdPrefix: (navigationStateRef: {
        current?: TableKeyboardNavigationStateType;
    }) => string;
    isNavigatable: (element: Element) => boolean;
    findNextIdByRowIndex: (initialRowIndex: number, cellIndex: number, elementId: string, matrix: string[][], isReverse: boolean) => [string, [number, number]] | [];
    findNextIdByCellIndex: (rowIndex: number, initialCellIndex: number, elementId: string, matrix: string[][], isReverse: boolean) => [string, [number, number]] | [];
    findId: (navigationMatrix: string[][], cellId?: string) => number[];
    getNextNavigationIndex: (navigationStateRef: {
        current?: TableKeyboardNavigationStateType;
    }) => number;
    getFilterColumnId: (columnId: string) => string;
};
