"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
/**
 * @hidden
 */
exports.generateNavigatableId = function (navigationId, idPrefix, type) {
    if (type === void 0) { type = 'cell'; }
    return idPrefix + "_" + navigationId + "_" + type;
};
/**
 * @hidden
 */
exports.getNavigatableLevel = function (element) {
    if (!element) {
        return;
    }
    return parseInt(element.getAttribute(constants_1.KEYBOARD_NAV_DATA_LEVEL) || '', 10);
};
/**
 * @hidden
 */
exports.getNavigatableId = function (element) {
    if (!element) {
        return;
    }
    var dataId = element.getAttribute(constants_1.KEYBOARD_NAV_DATA_ID);
    return dataId ? dataId : undefined;
};
/**
 * @hidden
 */
exports.isNavigatable = function (element) {
    if (!element) {
        return false;
    }
    var dataId = element.getAttribute(constants_1.KEYBOARD_NAV_DATA_ID);
    return Boolean(dataId);
};
/**
 * @hidden
 */
exports.getNavigatableElement = function (scope, options) {
    if (options === void 0) { options = { level: 0 }; }
    return scope.querySelector("[" + constants_1.KEYBOARD_NAV_DATA_LEVEL + "='" + options.level + "']");
};
/**
 * @hidden
 */
exports.getClosestNavigatableElement = function (target) {
    return (target.parentElement &&
        target.parentElement.closest("[" + constants_1.KEYBOARD_NAV_DATA_LEVEL + "]"));
};
/**
 * @hidden
 */
exports.getActiveElement = function (scope, activeId) {
    return scope.querySelector("[" + constants_1.KEYBOARD_NAV_DATA_ID + "='" + activeId + "']");
};
/**
 * @hidden
 */
exports.getClosestScope = function (target) {
    return (target.parentElement &&
        target.parentElement.closest("[" + constants_1.KEYBOARD_NAV_DATA_SCOPE + "]"));
};
/**
 * @hidden
 */
exports.getHeaderElement = function (scope) {
    return scope.querySelector("[" + constants_1.KEYBOARD_NAV_DATA_HEADER + "]");
};
/**
 * @hidden
 */
exports.getBodyElement = function (scope) {
    return scope.querySelector("[" + constants_1.KEYBOARD_NAV_DATA_BODY + "]");
};
/**
 * @hidden
 */
exports.getFocusableElements = function (scope, options) {
    if (options === void 0) { options = { focusable: false }; }
    var selectors = options.focusable ? constants_1.FOCUSABLE_ELEMENTS : constants_1.TABBABLE_ELEMENTS;
    return Array.from(scope.querySelectorAll(selectors.join(',')));
};
/**
 * @hidden
 */
exports.getNavigatableElements = function (scope, options) {
    if (options === void 0) { options = { level: 0 }; }
    if (!scope) {
        return [];
    }
    var selector = constants_1.FOCUSABLE_ELEMENTS.map(function (el) { return el + ("[" + constants_1.KEYBOARD_NAV_DATA_LEVEL + "='" + options.level + "']"); }).join(',');
    return Array.from(scope.querySelectorAll(selector));
};
/**
 * @hidden
 */
exports.filterNavigatableElements = function (options) {
    if (options === void 0) { options = { level: 0 }; }
    var selector = constants_1.FOCUSABLE_ELEMENTS.map(function (sel) { return sel + ("[" + constants_1.KEYBOARD_NAV_DATA_LEVEL + "='" + options.level + "']"); }).join(',');
    return function (element) { return element.matches(selector); };
};
/**
 * @hidden
 */
exports.focusElement = function (options) {
    var elementForFocus = options.elementForFocus, event = options.event, contextStateRef = options.contextStateRef, prevElement = options.prevElement;
    if (contextStateRef.current && elementForFocus && elementForFocus.focus) {
        event.preventDefault();
        elementForFocus.focus();
        if (exports.isNavigatable(elementForFocus)) {
            elementForFocus.setAttribute('tabIndex', '0');
            contextStateRef.current.activeId = exports.getNavigatableId(elementForFocus);
        }
        if (prevElement && exports.isNavigatable(prevElement)) {
            prevElement.setAttribute('tabIndex', '-1');
        }
    }
};
/**
 * @hidden
 */
exports.getIdPrefix = function (navigationStateRef) {
    return navigationStateRef.current ? navigationStateRef.current.idPrefix : '';
};
/**
 * @hidden
 */
exports.findNextIdByRowIndex = function (initialRowIndex, cellIndex, elementId, matrix, isReverse) {
    if (!elementId) {
        return [];
    }
    var currentRowIndex = initialRowIndex + (isReverse ? -1 : 1);
    while (currentRowIndex >= 0 && currentRowIndex < matrix.length) {
        var currentId = matrix[currentRowIndex][cellIndex];
        if (currentId !== elementId) {
            return [currentId, [currentRowIndex, cellIndex]];
        }
        currentRowIndex = currentRowIndex + (isReverse ? -1 : 1);
    }
    return [];
};
/**
 * @hidden
 */
exports.findNextIdByCellIndex = function (rowIndex, initialCellIndex, elementId, matrix, isReverse) {
    if (!elementId) {
        return [];
    }
    var currentCellIndex = initialCellIndex + (isReverse ? -1 : 1);
    while (currentCellIndex >= 0 && currentCellIndex < matrix[rowIndex].length) {
        var currentId = matrix[rowIndex][currentCellIndex];
        if (currentId !== elementId) {
            return [currentId, [rowIndex, currentCellIndex]];
        }
        currentCellIndex = currentCellIndex + (isReverse ? -1 : 1);
    }
    return [];
};
/**
 * @hidden
 */
exports.findId = function (navigationMatrix, cellId) {
    if (!cellId) {
        return;
    }
    for (var rowIndex = 0; rowIndex < navigationMatrix.length; rowIndex++) {
        for (var cellIndex = 0; cellIndex < navigationMatrix[rowIndex].length; cellIndex++) {
            if (navigationMatrix[rowIndex][cellIndex] === cellId) {
                return [rowIndex, cellIndex];
            }
        }
    }
};
/**
 * @hidden
 */
exports.getNextNavigationIndex = function (navigationStateRef) {
    return navigationStateRef.current ? navigationStateRef.current.navigationMatrix.length : 0;
};
/**
 * @hidden
 */
exports.getFilterColumnId = function (columnId) {
    return columnId ? "" + columnId + constants_1.KEYBOARD_NAV_FILTER_COL_SUFFIX : '';
};
/**
 * @hidden
 */
exports.tableKeyboardNavigationTools = {
    generateNavigatableId: exports.generateNavigatableId,
    getNavigatableId: exports.getNavigatableId,
    getNavigatableLevel: exports.getNavigatableLevel,
    getNavigatableElement: exports.getNavigatableElement,
    getClosestNavigatableElement: exports.getClosestNavigatableElement,
    getActiveElement: exports.getActiveElement,
    getClosestScope: exports.getClosestScope,
    getHeaderElement: exports.getHeaderElement,
    getBodyElement: exports.getBodyElement,
    getFocusableElements: exports.getFocusableElements,
    getNavigatableElements: exports.getNavigatableElements,
    filterNavigatableElements: exports.filterNavigatableElements,
    focusElement: exports.focusElement,
    getIdPrefix: exports.getIdPrefix,
    isNavigatable: exports.isNavigatable,
    findNextIdByRowIndex: exports.findNextIdByRowIndex,
    findNextIdByCellIndex: exports.findNextIdByCellIndex,
    findId: exports.findId,
    getNextNavigationIndex: exports.getNextNavigationIndex,
    getFilterColumnId: exports.getFilterColumnId
};
//# sourceMappingURL=utils.js.map