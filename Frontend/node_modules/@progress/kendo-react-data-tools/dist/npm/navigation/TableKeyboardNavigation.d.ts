import * as React from 'react';
import { TableKeyboardNavigationContextType } from './TableKeyboardNavigationContextType';
import { TableKeyboardNavigationStateType } from './TableKeyboardNavigationStateType';
/**
 * @hidden
 */
export declare const tableKeyboardNavigation: {
    onConstructor: (options: {
        navigatable: boolean;
        contextStateRef: {
            current?: TableKeyboardNavigationContextType;
        };
        navigationStateRef: {
            current?: TableKeyboardNavigationStateType;
        };
        idPrefix?: string;
    }) => void;
    onComponentDidMount: (options: {
        scope?: HTMLElement;
        contextStateRef: {
            current?: TableKeyboardNavigationContextType;
        };
        navigationStateRef: {
            current?: TableKeyboardNavigationStateType;
        };
    }) => void;
    onGetSnapshotBeforeUpdate: (options: {
        document: Document;
        contextStateRef: {
            current?: TableKeyboardNavigationContextType;
        };
        navigationStateRef: {
            current?: TableKeyboardNavigationStateType;
        };
    }) => void;
    onComponentDidUpdate: (options: {
        scope?: HTMLElement;
        contextStateRef: {
            current?: TableKeyboardNavigationContextType;
        };
        navigationStateRef: {
            current?: TableKeyboardNavigationStateType;
        };
    }) => void;
    onFocus: (event: React.FocusEvent<HTMLDivElement>, options: {
        contextStateRef: {
            current?: TableKeyboardNavigationContextType;
        };
    }) => void;
    onKeyDown: (event: React.KeyboardEvent<HTMLElement>, options: {
        contextStateRef: {
            current?: TableKeyboardNavigationContextType;
        };
        navigationStateRef: {
            current?: TableKeyboardNavigationStateType;
        };
    }) => void;
    generateHeaderMatrix: (options: {
        columns: {
            depth: number;
            id: string;
            colSpan: number;
            children: any[];
        }[];
        filterColumns?: {
            depth: number;
            id: string;
            colSpan: number;
            children: any[];
        }[];
        navigationStateRef: {
            current?: TableKeyboardNavigationStateType;
        };
    }) => void;
    generateRowMatrix: (options: {
        cellId: string;
        colSpan: number;
        navigationStateRef: any;
        rowIndex: number;
    }) => void;
    generateMatrix: (options: {
        scope?: HTMLElement;
        navigationStateRef: {
            current?: TableKeyboardNavigationStateType;
        };
    }) => void;
};
